// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace LMS_BACKEND_MAIN.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240627150758_lamao")]
    partial class lamao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerifyCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("EmailVerifyCode");

                    b.Property<DateTime>("EmailVerifyCodeAge")
                        .HasColumnType("datetime2")
                        .HasColumnName("EmailVerifyCodeAge");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FullName");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit")
                        .HasColumnName("IsBanned");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserRefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("VerifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ae013ac-6e5f-4ef9-b6df-57374304abe8",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(803),
                            Email = "minhtche161354@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(815),
                            FullName = "Tran Cong Minh",
                            Gender = false,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MINHTCHE161354@FPT.EDU.VN",
                            NormalizedUserName = "MINHTCHE161354",
                            PasswordHash = "AQAAAAIAAYagAAAAELgUn5wJH9empSyZm7MdUy84spVESi+LvNCV8nDY9PMgoY0fOBYhfZO/MPZHjSZimA==",
                            PhoneNumber = "0963661093",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5344f081-1e79-4390-93a8-d7db2788a34e",
                            TwoFactorEnabled = false,
                            UserName = "minhtche161354",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(816)
                        },
                        new
                        {
                            Id = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f1a2ee2-4884-49c0-a815-732ccbe6fb59",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(833),
                            Email = "thailshe160614@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(835),
                            FullName = "Le Sy Thai",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THAILSHE160614@FPT.EDU.VN",
                            NormalizedUserName = "THAILSHE160614",
                            PasswordHash = "AQAAAAIAAYagAAAAEO5SGANyOkCieJN+MspCJeIbBLjDruXYD5omO5+7u9NVKctIo979jEts1uoDaalzTw==",
                            PhoneNumber = "0497461220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d5870138-331a-4da4-b028-4a6f3e21ea9d",
                            TwoFactorEnabled = false,
                            UserName = "thailshe160614",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(835)
                        },
                        new
                        {
                            Id = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4414701e-8618-48bd-8038-f1f1a786cf5f",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(854),
                            Email = "hungmvhe163655@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(856),
                            FullName = "Mai Viet Hung",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNGMVHE163655@FPT.EDU.VN",
                            NormalizedUserName = "HUNGMVHE163655",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaY3BZO2ooRDvclwsiVvksAaPExz0GAXkEHlfwAtwfVBfRcw9gQTR02USItL9NrSg==",
                            PhoneNumber = "0975461220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e150867e-6474-43d7-ba9e-8ad0139d3c93",
                            TwoFactorEnabled = false,
                            UserName = "hungmvhe163655",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(856)
                        },
                        new
                        {
                            Id = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b7819b9-517b-4e45-bb67-77b571f840c4",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(872),
                            Email = "cuongndhe163098@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(873),
                            FullName = "Nguyen Duc Cuong",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUONGNDHE163098@FPT.EDU.VN",
                            NormalizedUserName = "CUONGNDHE163098",
                            PasswordHash = "AQAAAAIAAYagAAAAENVZ95qV36S0GH4gzip/nSmI9JKDA1CAGuL2+t1ysccrtPgGLrSZ6k9v/tS37ojoSw==",
                            PhoneNumber = "0975465220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9057eab6-16c5-46ce-a6fd-2b69091028aa",
                            TwoFactorEnabled = false,
                            UserName = "cuongndhe163098",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(874)
                        },
                        new
                        {
                            Id = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7feca6ac-b71f-4f64-9243-e7d9063894b1",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(889),
                            Email = "hoangnmhe163884@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(891),
                            Gender = false,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOANGNMHE163884@FPT.EDU.VN",
                            NormalizedUserName = "HOANGNMHE163884",
                            PasswordHash = "AQAAAAIAAYagAAAAEBSeWGYcWJzo0jTXDBqXgYkMmzdQCRKsLrFMaaqieAdCHchkvB2oa1eRy3gsuvWyVw==",
                            PhoneNumber = "0975765220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "16d24e82-3b5f-43e4-b2e5-30c64042af7c",
                            TwoFactorEnabled = false,
                            UserName = "hoangnmhe163884",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(891)
                        },
                        new
                        {
                            Id = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fc39864-bc3a-4a73-bb1d-4030ce7f286b",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(909),
                            Email = "littlejohn123@gmail.com",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(910),
                            FullName = "John",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LITTLEJOHN123@GMAIL.COM",
                            NormalizedUserName = "LITTLEJOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJ1v35yMdrboz2wNnq7ycAFHmE2gEKN5HvTBhtJlXU94370YPUlLqftEVfKcYgPA==",
                            PhoneNumber = "0965765228",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "894cfb8c-7028-4a5d-b921-429fbbc12073",
                            TwoFactorEnabled = false,
                            UserName = "littlejohn",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(911)
                        },
                        new
                        {
                            Id = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b946cd8d-a447-443a-8f01-4b252a4c6dd8",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(926),
                            Email = "kenshiyonezu123@gmail.com",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(927),
                            FullName = "Kenshi Yonezu",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KENSHIYONEZU123@GMAIL.COM",
                            NormalizedUserName = "KENSHIYONEZU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJ1v35yMdrboz2wNnq7ycAFHmE2gEKN5HvTBhtJlXU94370YPUlLqftEVfKcYgPA==",
                            PhoneNumber = "0965765120",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0f62becb-ff6d-4219-a76e-111cafcb041b",
                            TwoFactorEnabled = false,
                            UserName = "kenshiyonezu",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(928)
                        },
                        new
                        {
                            Id = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c3f851d-a22a-4094-bb14-4b8acb63b16b",
                            CreatedDate = new DateTime(2024, 6, 27, 22, 7, 58, 568, DateTimeKind.Local).AddTicks(957),
                            Email = "gakkou123@gmail.com",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(958),
                            FullName = "Gakkou Atarashi",
                            Gender = false,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAKKOU123@GMAIL.COM",
                            NormalizedUserName = "GAKKOU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJ1v35yMdrboz2wNnq7ycAFHmE2gEKN5HvTBhtJlXU94370YPUlLqftEVfKcYgPA==",
                            PhoneNumber = "0965795220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fe9fbde3-ad1f-4cd9-ae5a-80fb8146740d",
                            TwoFactorEnabled = false,
                            UserName = "gakkou",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 27, 15, 7, 58, 568, DateTimeKind.Utc).AddTicks(959)
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ParentId");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("DeviceStatusId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceStatusId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Name");

                    b.Property<string>("OwnedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("OwnedBy");

                    b.HasKey("Id");

                    b.HasIndex("DeviceStatusId");

                    b.HasIndex("OwnedBy");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Entities.Models.DeviceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("DeviceStatuses");
                });

            modelBuilder.Entity("Entities.Models.Files", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("FileKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FileKey");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FolderId");

                    b.Property<string>("MimeType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MimeType");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.Property<float>("Size")
                        .HasColumnType("real")
                        .HasColumnName("Size");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UploadDate");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Entities.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Entities.Models.FolderClosure", b =>
                {
                    b.Property<Guid>("AncestorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ancestor");

                    b.Property<Guid>("DescendantID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Descendant");

                    b.Property<int>("Depth")
                        .HasColumnType("int")
                        .HasColumnName("Depth");

                    b.HasKey("AncestorID", "DescendantID");

                    b.HasIndex("DescendantID");

                    b.ToTable("FoldersClosure");
                });

            modelBuilder.Entity("Entities.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("HexColor")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .HasColumnName("HexColor")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Entities.Models.Member", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("bit")
                        .HasColumnName("IsLeader");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Entities.Models.NewsFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("FileKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FileKey");

                    b.Property<int>("NewsID")
                        .HasColumnType("int")
                        .HasColumnName("NewsId");

                    b.HasKey("Id")
                        .HasName("PK_NewsFiles_1");

                    b.HasIndex("NewsID");

                    b.ToTable("NewsFiles");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationTypeId");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Models.NotificationAccount", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationId");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IsRead");

                    b.HasKey("NotificationId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("NotificationAccounts");
                });

            modelBuilder.Entity("Entities.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Description");

                    b.Property<string>("IsRecruiting")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("IsRecruiting")
                        .IsFixedLength();

                    b.Property<int>("MaxMember")
                        .HasColumnType("int")
                        .HasColumnName("MaxMember");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectStatusId");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Entities.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("Entities.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeviceId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Purpose")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Purpose");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Entities.Models.StudentDetail", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.Property<string>("Major")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Major");

                    b.Property<string>("RollNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RollNumber");

                    b.Property<string>("Specialized")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Specialized");

                    b.HasKey("AccountId");

                    b.ToTable("StudentDetails");

                    b.HasData(
                        new
                        {
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            Major = "Software Engineering",
                            RollNumber = "HE163098",
                            Specialized = "ASP.NET"
                        },
                        new
                        {
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            Major = "Data Engineer",
                            RollNumber = "HE163884",
                            Specialized = "Data Analyst"
                        },
                        new
                        {
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            Major = "Artifact Intelligent",
                            RollNumber = "HE163956",
                            Specialized = "C"
                        },
                        new
                        {
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            Major = "Iot",
                            RollNumber = "HE145689",
                            Specialized = "Python"
                        },
                        new
                        {
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            Major = "Software Engineering",
                            RollNumber = "HE156894",
                            Specialized = "PHP"
                        });
                });

            modelBuilder.Entity("Entities.Models.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EditDate");

                    b.Property<bool>("RequiredValidation")
                        .HasColumnType("bit")
                        .HasColumnName("RequiresValidation");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<Guid>("TaskGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskGuid");

                    b.Property<int>("TaskPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("TaskPriorityId");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TaskStatusId");

                    b.Property<Guid?>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("TaskGuid");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TasksId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("Entities.Models.TaskList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("MaxTasks")
                        .HasColumnType("int")
                        .HasColumnName("MaxTasks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskLists");
                });

            modelBuilder.Entity("Entities.Models.TaskPriorities", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskPriorities");
                });

            modelBuilder.Entity("Entities.Models.Tasks", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AssignedTo");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<Guid?>("PredecessorTaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PredecessorTaskId");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("RequiredValidation")
                        .HasColumnType("bit")
                        .HasColumnName("RequiresValidation");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<Guid>("TaskListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskListId");

                    b.Property<int>("TaskPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("TaskPriorityId");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TaskStatusId");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("PredecessorTaskId");

                    b.HasIndex("TaskListId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Entities.Models.TasksStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskStatus", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SystemRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c55924f5-4cf4-4a29-9820-b5d0d9bdf3c5",
                            Name = "LabAdmin",
                            NormalizedName = "LABADMIN"
                        },
                        new
                        {
                            Id = "cd10e24b-ecbc-4dd0-8141-32c452e1d1c2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            RoleId = "c55924f5-4cf4-4a29-9820-b5d0d9bdf3c5"
                        },
                        new
                        {
                            UserId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            RoleId = "cd10e24b-ecbc-4dd0-8141-32c452e1d1c2"
                        },
                        new
                        {
                            UserId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            RoleId = "cd10e24b-ecbc-4dd0-8141-32c452e1d1c2"
                        },
                        new
                        {
                            UserId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AccountToken", (string)null);
                });

            modelBuilder.Entity("TaskHistoriesLabels", b =>
                {
                    b.Property<Guid>("TaskHistoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskHistoryId");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LabelId");

                    b.HasKey("TaskHistoryId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TaskHistoriesLabels", (string)null);
                });

            modelBuilder.Entity("TasksAccount", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.HasKey("TaskId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("TasksAccounts", (string)null);
                });

            modelBuilder.Entity("TasksFile", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FileId");

                    b.HasKey("TaskId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TasksFiles", (string)null);
                });

            modelBuilder.Entity("TasksLabel", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LabelId");

                    b.HasKey("TaskId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TasksLabels", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.HasOne("Entities.Models.Account", "VerifiedByUser")
                        .WithMany("VerifiedAccounts")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK_Accounts_Accounts");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByUser")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Comments_Accounts");

                    b.HasOne("Entities.Models.Comment", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Comments_Comments");

                    b.HasOne("Entities.Models.Tasks", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Tasks");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Parent");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.HasOne("Entities.Models.DeviceStatus", "DeviceStatus")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Devices_DeviceStatuses");

                    b.HasOne("Entities.Models.Account", "OwnedByUser")
                        .WithMany("Devices")
                        .HasForeignKey("OwnedBy")
                        .HasConstraintName("FK_Devices_Accounts");

                    b.Navigation("DeviceStatus");

                    b.Navigation("OwnedByUser");
                });

            modelBuilder.Entity("Entities.Models.Files", b =>
                {
                    b.HasOne("Entities.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .IsRequired()
                        .HasConstraintName("FK_Files_Folders");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Entities.Models.Folder", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByUser")
                        .WithMany("Folders")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Folders_Accounts");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Entities.Models.FolderClosure", b =>
                {
                    b.HasOne("Entities.Models.Folder", "AncestorNavigation")
                        .WithMany("FolderClosureAncestor")
                        .HasForeignKey("AncestorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FolderClosures_Folders");

                    b.HasOne("Entities.Models.Folder", "DescendantNavigation")
                        .WithMany("FolderClosureDescendant")
                        .HasForeignKey("DescendantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FolderClosures_Folders1");

                    b.Navigation("AncestorNavigation");

                    b.Navigation("DescendantNavigation");
                });

            modelBuilder.Entity("Entities.Models.Member", b =>
                {
                    b.HasOne("Entities.Models.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_Projects");

                    b.HasOne("Entities.Models.Account", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_Accounts");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByNavigation")
                        .WithMany("News")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_News_Accounts");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Entities.Models.NewsFile", b =>
                {
                    b.HasOne("Entities.Models.News", "News")
                        .WithMany("NewsFiles")
                        .HasForeignKey("NewsID")
                        .IsRequired()
                        .HasConstraintName("FK_NewsFiles_News1");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByUser")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Notifications_Accounts");

                    b.HasOne("Entities.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_NotificationTypes");

                    b.Navigation("CreatedByUser");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Entities.Models.NotificationAccount", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithMany("NotificationsAccounts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationsAccounts_Accounts");

                    b.HasOne("Entities.Models.Notification", "Notification")
                        .WithMany("NotificationsAccounts")
                        .HasForeignKey("NotificationId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationsAccounts_Notifications");

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.HasOne("Entities.Models.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_ProjectStatuses");

                    b.HasOne("Entities.Models.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_ProjectTypes");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany("Reports")
                        .HasForeignKey("AccountId");

                    b.HasOne("Entities.Models.Schedule", "Schedules")
                        .WithOne("Report")
                        .HasForeignKey("Entities.Models.Report", "ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_Schedules");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithMany("Schedules")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Accounts");

                    b.HasOne("Entities.Models.Device", "Device")
                        .WithMany("Schedules")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Devices");

                    b.Navigation("Account");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Entities.Models.StudentDetail", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithOne("StudentDetail")
                        .HasForeignKey("Entities.Models.StudentDetail", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentDetails_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Models.TaskHistory", b =>
                {
                    b.HasOne("Entities.Models.Account", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tasks", "TaskVersion")
                        .WithMany()
                        .HasForeignKey("TaskGuid")
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistories_Tasks");

                    b.HasOne("Entities.Models.TaskPriorities", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistories_TaskPrioties");

                    b.HasOne("Entities.Models.TasksStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistories_TaskStatus");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany("TaskHistories")
                        .HasForeignKey("TasksId");

                    b.Navigation("AssignedToUser");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskVersion");
                });

            modelBuilder.Entity("Entities.Models.TaskList", b =>
                {
                    b.HasOne("Entities.Models.Project", "Project")
                        .WithMany("TaskLists")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskLists_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Entities.Models.Tasks", b =>
                {
                    b.HasOne("Entities.Models.Account", "AssignedToUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_Tasks_Accounts");

                    b.HasOne("Entities.Models.Tasks", "PredecessorTask")
                        .WithMany("InversePredecessorTask")
                        .HasForeignKey("PredecessorTaskId")
                        .HasConstraintName("FK_Tasks_Tasks");

                    b.HasOne("Entities.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskLists");

                    b.HasOne("Entities.Models.TaskPriorities", "TaskPriority")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskPriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskPrioties");

                    b.HasOne("Entities.Models.TasksStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskStatus");

                    b.Navigation("AssignedToUser");

                    b.Navigation("PredecessorTask");

                    b.Navigation("TaskList");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskHistoriesLabels", b =>
                {
                    b.HasOne("Entities.Models.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistoriesLabels_Labels");

                    b.HasOne("Entities.Models.TaskHistory", null)
                        .WithMany()
                        .HasForeignKey("TaskHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistoriesLabels_TaskHistories");
                });

            modelBuilder.Entity("TasksAccount", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksAccounts_Accounts");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksAccounts_Tasks");
                });

            modelBuilder.Entity("TasksFile", b =>
                {
                    b.HasOne("Entities.Models.Files", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksFiles_Files");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksFiles_Tasks");
                });

            modelBuilder.Entity("TasksLabel", b =>
                {
                    b.HasOne("Entities.Models.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksLabels_Labels");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksLabels_Tasks");
                });

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Devices");

                    b.Navigation("Folders");

                    b.Navigation("Members");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("NotificationsAccounts");

                    b.Navigation("Reports");

                    b.Navigation("Schedules");

                    b.Navigation("StudentDetail");

                    b.Navigation("Tasks");

                    b.Navigation("VerifiedAccounts");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Entities.Models.DeviceStatus", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Entities.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("FolderClosureAncestor");

                    b.Navigation("FolderClosureDescendant");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.Navigation("NewsFiles");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Navigation("NotificationsAccounts");
                });

            modelBuilder.Entity("Entities.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("TaskLists");
                });

            modelBuilder.Entity("Entities.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Entities.Models.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("Entities.Models.TaskList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Entities.Models.TaskPriorities", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Entities.Models.Tasks", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InversePredecessorTask");

                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("Entities.Models.TasksStatus", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
