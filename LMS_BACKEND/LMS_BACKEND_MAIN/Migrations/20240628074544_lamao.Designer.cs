// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace LMS_BACKEND_MAIN.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240628074544_lamao")]
    partial class lamao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerifyCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("EmailVerifyCode");

                    b.Property<DateTime>("EmailVerifyCodeAge")
                        .HasColumnType("datetime2")
                        .HasColumnName("EmailVerifyCodeAge");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FullName");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("Gender");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit")
                        .HasColumnName("IsBanned");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UserRefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("VerifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c24ef1a-8b6f-43e6-b540-df72877da366",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5018),
                            Email = "minhtche161354@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5029),
                            FullName = "Tran Cong Minh",
                            Gender = false,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MINHTCHE161354@FPT.EDU.VN",
                            NormalizedUserName = "MINHTCHE161354",
                            PasswordHash = "AQAAAAIAAYagAAAAELgUn5wJH9empSyZm7MdUy84spVESi+LvNCV8nDY9PMgoY0fOBYhfZO/MPZHjSZimA==",
                            PhoneNumber = "0963661093",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "86c116e9-22ed-47b9-8148-a6ecd4e07f2f",
                            TwoFactorEnabled = false,
                            UserName = "minhtche161354",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5030)
                        },
                        new
                        {
                            Id = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34c9ab67-b399-4f96-bf0e-73f2471070b0",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5047),
                            Email = "thailshe160614@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5048),
                            FullName = "Le Sy Thai",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THAILSHE160614@FPT.EDU.VN",
                            NormalizedUserName = "THAILSHE160614",
                            PasswordHash = "AQAAAAIAAYagAAAAEO5SGANyOkCieJN+MspCJeIbBLjDruXYD5omO5+7u9NVKctIo979jEts1uoDaalzTw==",
                            PhoneNumber = "0497461220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f2916c8e-f466-4acb-8730-85fd2ff5149e",
                            TwoFactorEnabled = false,
                            UserName = "thailshe160614",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5049)
                        },
                        new
                        {
                            Id = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd070290-ae6b-481f-8b42-a94d237319ee",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5071),
                            Email = "hungmvhe163655@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5073),
                            FullName = "Mai Viet Hung",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNGMVHE163655@FPT.EDU.VN",
                            NormalizedUserName = "HUNGMVHE163655",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaY3BZO2ooRDvclwsiVvksAaPExz0GAXkEHlfwAtwfVBfRcw9gQTR02USItL9NrSg==",
                            PhoneNumber = "0975461220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a2166c78-da8b-4c02-93db-19095592fcf3",
                            TwoFactorEnabled = false,
                            UserName = "hungmvhe163655",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5074)
                        },
                        new
                        {
                            Id = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ed86d88-72ea-42d2-bacd-d13da65c8e2f",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5091),
                            Email = "cuongndhe163098@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5093),
                            FullName = "Nguyen Duc Cuong",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUONGNDHE163098@FPT.EDU.VN",
                            NormalizedUserName = "CUONGNDHE163098",
                            PasswordHash = "AQAAAAIAAYagAAAAENVZ95qV36S0GH4gzip/nSmI9JKDA1CAGuL2+t1ysccrtPgGLrSZ6k9v/tS37ojoSw==",
                            PhoneNumber = "0975465220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cb9e43b8-ecd7-48fd-9d05-417661f7c5c0",
                            TwoFactorEnabled = false,
                            UserName = "cuongndhe163098",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5093)
                        },
                        new
                        {
                            Id = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97f928b2-d471-4b7d-a690-1d16a8877ae1",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5114),
                            Email = "hoangnmhe163884@fpt.edu.vn",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5116),
                            Gender = false,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOANGNMHE163884@FPT.EDU.VN",
                            NormalizedUserName = "HOANGNMHE163884",
                            PasswordHash = "AQAAAAIAAYagAAAAEBSeWGYcWJzo0jTXDBqXgYkMmzdQCRKsLrFMaaqieAdCHchkvB2oa1eRy3gsuvWyVw==",
                            PhoneNumber = "0975765220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cfa1b72d-c40c-45b5-be37-188bbaba0f39",
                            TwoFactorEnabled = false,
                            UserName = "hoangnmhe163884",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5116)
                        },
                        new
                        {
                            Id = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c61ffd2e-c0ca-4b69-8566-a90887d84c63",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5146),
                            Email = "littlejohn123@gmail.com",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5148),
                            FullName = "John",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LITTLEJOHN123@GMAIL.COM",
                            NormalizedUserName = "LITTLEJOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJ1v35yMdrboz2wNnq7ycAFHmE2gEKN5HvTBhtJlXU94370YPUlLqftEVfKcYgPA==",
                            PhoneNumber = "0965765228",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fa2b7b65-b2ad-4100-900e-d3a42515bb15",
                            TwoFactorEnabled = false,
                            UserName = "littlejohn",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5149)
                        },
                        new
                        {
                            Id = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b5dac49-5be9-492f-9880-396ff544e8b9",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5165),
                            Email = "kenshiyonezu123@gmail.com",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5167),
                            FullName = "Kenshi Yonezu",
                            Gender = true,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KENSHIYONEZU123@GMAIL.COM",
                            NormalizedUserName = "KENSHIYONEZU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJ1v35yMdrboz2wNnq7ycAFHmE2gEKN5HvTBhtJlXU94370YPUlLqftEVfKcYgPA==",
                            PhoneNumber = "0965765120",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c1076536-a24d-4001-8cda-41c2fd3c5a91",
                            TwoFactorEnabled = false,
                            UserName = "kenshiyonezu",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5167)
                        },
                        new
                        {
                            Id = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9e3b585-fedf-4d57-bf59-512c41e36e3a",
                            CreatedDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5187),
                            Email = "gakkou123@gmail.com",
                            EmailConfirmed = true,
                            EmailVerifyCodeAge = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5189),
                            FullName = "Gakkou Atarashi",
                            Gender = false,
                            IsBanned = false,
                            IsDeleted = false,
                            IsVerified = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAKKOU123@GMAIL.COM",
                            NormalizedUserName = "GAKKOU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgJ1v35yMdrboz2wNnq7ycAFHmE2gEKN5HvTBhtJlXU94370YPUlLqftEVfKcYgPA==",
                            PhoneNumber = "0965795220",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7704f61e-1b45-47c3-a5b9-84aa5875b5f1",
                            TwoFactorEnabled = false,
                            UserName = "gakkou",
                            UserRefreshTokenExpiryTime = new DateTime(2024, 6, 28, 7, 45, 44, 277, DateTimeKind.Utc).AddTicks(5189)
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ParentId");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("DeviceStatusId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceStatusId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUsed");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Name");

                    b.Property<string>("OwnedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("OwnedBy");

                    b.HasKey("Id");

                    b.HasIndex("DeviceStatusId");

                    b.HasIndex("OwnedBy");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9eae03ad-745d-47c0-baef-ae4657964e6a"),
                            Description = "Primary server",
                            DeviceStatusId = 1,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5764),
                            Name = "Server",
                            OwnedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d"
                        },
                        new
                        {
                            Id = new Guid("51e6edb8-0a1f-4c26-afb7-fcf95ea0965f"),
                            Description = "Network switch",
                            DeviceStatusId = 3,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 13, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5798),
                            Name = "Switch",
                            OwnedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d"
                        },
                        new
                        {
                            Id = new Guid("0104f1af-a314-4c64-8b8d-92c72caa97df"),
                            Description = "Dell UltraSharp U2723QE 27 inch",
                            DeviceStatusId = 2,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5768),
                            Name = "Screen",
                            OwnedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209"
                        },
                        new
                        {
                            Id = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            Description = "Thai's PC",
                            DeviceStatusId = 1,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 25, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5772),
                            Name = "PC",
                            OwnedBy = "a687bb04-4f19-49d5-a60f-2db52044767c"
                        },
                        new
                        {
                            Id = new Guid("11d331b4-136c-4844-a686-ffc38c103268"),
                            Description = "Main office router",
                            DeviceStatusId = 3,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 18, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5775),
                            Name = "Router",
                            OwnedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d"
                        },
                        new
                        {
                            Id = new Guid("b4dc2d48-482a-48a2-bad6-7a1e0e3139b7"),
                            Description = "Development desktop",
                            DeviceStatusId = 1,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5779),
                            Name = "Desktop",
                            OwnedBy = "a687bb04-4f19-49d5-a60f-2db52044767c"
                        },
                        new
                        {
                            Id = new Guid("0a395b72-ae0d-4a49-b7f8-1763de733068"),
                            Description = "High resolution monitor",
                            DeviceStatusId = 2,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 23, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5782),
                            Name = "Monitor",
                            OwnedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209"
                        },
                        new
                        {
                            Id = new Guid("5947a22f-0191-419c-873b-4324b5b95e84"),
                            Description = "Office printer",
                            DeviceStatusId = 1,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 21, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5788),
                            Name = "Printer",
                            OwnedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d"
                        },
                        new
                        {
                            Id = new Guid("a1d65f8a-f7fd-4995-940f-6ab254523f90"),
                            Description = "Designer's tablet",
                            DeviceStatusId = 2,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5791),
                            Name = "Tablet",
                            OwnedBy = "a687bb04-4f19-49d5-a60f-2db52044767c"
                        },
                        new
                        {
                            Id = new Guid("eb934470-4e73-41a8-8304-3bcb1ea18502"),
                            Description = "Conference room projector",
                            DeviceStatusId = 1,
                            IsDeleted = false,
                            LastUsed = new DateTime(2024, 6, 24, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5794),
                            Name = "Projector",
                            OwnedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d"
                        });
                });

            modelBuilder.Entity("Entities.Models.DeviceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("DeviceStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In Use"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Disable"
                        });
                });

            modelBuilder.Entity("Entities.Models.Files", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("FileKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FileKey");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FolderId");

                    b.Property<string>("MimeType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MimeType");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.Property<float>("Size")
                        .HasColumnType("real")
                        .HasColumnName("Size");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UploadDate");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Entities.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Entities.Models.FolderClosure", b =>
                {
                    b.Property<Guid>("AncestorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ancestor");

                    b.Property<Guid>("DescendantID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Descendant");

                    b.Property<int>("Depth")
                        .HasColumnType("int")
                        .HasColumnName("Depth");

                    b.HasKey("AncestorID", "DescendantID");

                    b.HasIndex("DescendantID");

                    b.ToTable("FoldersClosure");
                });

            modelBuilder.Entity("Entities.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("HexColor")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .HasColumnName("HexColor")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Entities.Models.Member", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("bit")
                        .HasColumnName("IsLeader");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efb06517-4673-4b44-bf11-ee12198c26a7"),
                            Content = "This is the content of news item 1.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 1"
                        },
                        new
                        {
                            Id = new Guid("7c712eff-f7d8-41af-a36c-9d7ce1439e3b"),
                            Content = "This is the content of news item 2.",
                            CreatedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            CreatedDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 2"
                        },
                        new
                        {
                            Id = new Guid("663c5d19-d3ed-4d6a-aff6-3997dd0c43c4"),
                            Content = "This is the content of news item 10.",
                            CreatedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            CreatedDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 10"
                        },
                        new
                        {
                            Id = new Guid("6e08720f-d73a-4ae1-be83-559dbb96a344"),
                            Content = "This is the content of news item 11.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 11"
                        },
                        new
                        {
                            Id = new Guid("14764db6-10f1-48e6-a4e8-3ae063814acf"),
                            Content = "This is the content of news item 12.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 12"
                        },
                        new
                        {
                            Id = new Guid("f0c49374-4c7d-464a-9f38-e6f59b20344d"),
                            Content = "This is the content of news item 13.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 13"
                        },
                        new
                        {
                            Id = new Guid("0da0b088-1b08-404b-9696-eb539d31c9e5"),
                            Content = "This is the content of news item 14.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 14"
                        },
                        new
                        {
                            Id = new Guid("5d0bfb1c-d68d-450e-8fe9-e7d94be4eaac"),
                            Content = "This is the content of news item 15.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 15"
                        },
                        new
                        {
                            Id = new Guid("0985634f-496f-4480-83f0-14ff0c30b002"),
                            Content = "This is the content of news item 16.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 16"
                        },
                        new
                        {
                            Id = new Guid("245b3c4d-ba95-4040-818d-23da69f08e9b"),
                            Content = "This is the content of news item 17.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 17"
                        },
                        new
                        {
                            Id = new Guid("e277ec7f-14cf-47a2-a234-1265920647a4"),
                            Content = "This is the content of news item 18.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 18"
                        },
                        new
                        {
                            Id = new Guid("fb4d071c-c460-4a01-8ee4-9247a97214a6"),
                            Content = "This is the content of news item 19.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 19"
                        },
                        new
                        {
                            Id = new Guid("97755739-5cc9-49f7-bcf7-a66765be0571"),
                            Content = "This is the content of news item 20.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 20"
                        },
                        new
                        {
                            Id = new Guid("cfc8a241-628f-4fab-acaf-60ffd42f97cd"),
                            Content = "This is the content of news item 3.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 3"
                        },
                        new
                        {
                            Id = new Guid("650204d7-0be6-4f91-89f7-d80572d4f76a"),
                            Content = "This is the content of news item 4.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 4"
                        },
                        new
                        {
                            Id = new Guid("049d2c9c-f550-4e21-8911-efc5789106ec"),
                            Content = "This is the content of news item 5.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 5"
                        },
                        new
                        {
                            Id = new Guid("6798cf4d-8399-4572-955e-595ddf13f292"),
                            Content = "This is the content of news item 6.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 6"
                        },
                        new
                        {
                            Id = new Guid("a491e3db-344e-4f16-a051-1ed491901340"),
                            Content = "This is the content of news item 7.",
                            CreatedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            CreatedDate = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 7"
                        },
                        new
                        {
                            Id = new Guid("c0268d79-cfd7-44c3-9b13-709869ae00e2"),
                            Content = "This is the content of news item 8.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 8"
                        },
                        new
                        {
                            Id = new Guid("f3e39c12-df43-4e2a-b84e-92374739e0e9"),
                            Content = "This is the content of news item 9.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "News Title 9"
                        });
                });

            modelBuilder.Entity("Entities.Models.NewsFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("FileKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FileKey");

                    b.Property<Guid>("NewsID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NewsId");

                    b.HasKey("Id")
                        .HasName("PK_NewsFiles_1");

                    b.HasIndex("NewsID");

                    b.ToTable("NewsFiles");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationTypeId");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            Content = "A new system update will be available tomorrow.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5337),
                            NotificationTypeId = 1,
                            Title = "System Update",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            Content = "Scheduled maintenance will occur this weekend.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5357),
                            NotificationTypeId = 1,
                            Title = "Maintenance Notice",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            Content = "We are excited to announce a new feature in our application.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 6, 25, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5362),
                            NotificationTypeId = 1,
                            Title = "New Feature Release",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            Content = "Please update your password to enhance security.",
                            CreatedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            CreatedDate = new DateTime(2024, 6, 24, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5366),
                            NotificationTypeId = 1,
                            Title = "Security Alert",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            Content = "The system will be down for maintenance tonight.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 6, 23, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5372),
                            NotificationTypeId = 1,
                            Title = "Downtime Notification",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            Content = "Join weekly meeting.",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 6, 22, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5375),
                            NotificationTypeId = 2,
                            Title = "Weekly Meeting",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            Content = "Don't miss out on our latest promotions!",
                            CreatedBy = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            CreatedDate = new DateTime(2024, 6, 21, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5378),
                            NotificationTypeId = 2,
                            Title = "Promotion Alert",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            Content = "Please take a moment to complete our user survey.",
                            CreatedBy = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            CreatedDate = new DateTime(2024, 6, 20, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5382),
                            NotificationTypeId = 2,
                            Title = "Survey Request",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            Content = "Your account details have been updated.",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 6, 19, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5385),
                            NotificationTypeId = 1,
                            Title = "Account Notice",
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            Content = "Don't forget about the event tomorrow!",
                            CreatedBy = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            CreatedDate = new DateTime(2024, 6, 18, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5389),
                            NotificationTypeId = 1,
                            Title = "Event Reminder",
                            Url = ""
                        });
                });

            modelBuilder.Entity("Entities.Models.NotificationAccount", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NotificationId");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IsRead");

                    b.HasKey("NotificationId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("NotificationAccounts");

                    b.HasData(
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e331de18-289c-403d-8028-26c4b595587a"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("dc42dcc5-b3d1-4bab-8263-bee081234d38"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("86514fb2-c7d5-487c-ba29-371a8c8c825d"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("b20db794-17a6-4802-aa6f-7e540e34643b"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("d6dedee7-ab6d-4bfd-bdf7-b3665679cc50"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("e4455de4-ff95-4957-85a1-b03b8b97f9c3"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("4f517076-e6c7-43ce-93b6-9aeae4857760"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("931129a9-986f-4560-99f1-a06b692c71a1"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("5754541e-7c1e-4839-8021-963e90f6e4e0"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            IsRead = false
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            IsRead = true
                        },
                        new
                        {
                            NotificationId = new Guid("a48b1a4c-83de-4469-a9ec-dbf01ea41ad5"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            IsRead = true
                        });
                });

            modelBuilder.Entity("Entities.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "System"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Project"
                        });
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("Description");

                    b.Property<string>("IsRecruiting")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("IsRecruiting")
                        .IsFixedLength();

                    b.Property<int>("MaxMember")
                        .HasColumnType("int")
                        .HasColumnName("MaxMember");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectStatusId");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Entities.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("Entities.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75fb870f-e344-40c9-ab85-101631f22505"),
                            Description = "Device was used for setting up a new development environment.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("44efa2a7-4f64-4fc6-bbbe-869099817d4f")
                        },
                        new
                        {
                            Id = new Guid("d3b039bd-813c-4b33-af98-2264dcb440c0"),
                            Description = "The laptop was utilized for testing the latest software build.",
                            DeviceStatusId = 2,
                            ScheduleId = new Guid("e377b750-0b20-4943-9e5d-6909d4810f13")
                        },
                        new
                        {
                            Id = new Guid("c8fb056c-cff8-4db2-b951-01859431a35e"),
                            Description = "Router firmware was updated and tested.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("37d2c7b3-7406-418d-9062-e81dfff02d9a")
                        },
                        new
                        {
                            Id = new Guid("8455c9b0-c2ca-4de4-bdee-3070dc8af954"),
                            Description = "The desktop was used for backend development tasks.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("e0fa81b1-9eea-4b4b-93a7-b7a34aae4014")
                        },
                        new
                        {
                            Id = new Guid("426c57ce-68aa-498b-b603-16cf1e7a238d"),
                            Description = "Monitor calibrated for color accuracy.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("db1fcaa0-e934-4429-a567-2ac802d0b453")
                        },
                        new
                        {
                            Id = new Guid("285ce1fd-470c-4474-ad1b-ba273c0e8653"),
                            Description = "Printer serviced and toner replaced.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("27f1b969-1b68-4cf8-8a51-c8be5356f7f8")
                        },
                        new
                        {
                            Id = new Guid("dd8ac1ac-0f4f-45af-825e-e74e531b66dc"),
                            Description = "Tablet used for sketching new UI designs.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("4da0b3f8-95aa-40cd-ab32-75876ca13900")
                        },
                        new
                        {
                            Id = new Guid("f1dcaea6-1670-47d7-b8cb-398b89ca09d0"),
                            Description = "Projector used in a client presentation.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("80d34442-7c14-4060-ae8f-24cda38e63f9")
                        },
                        new
                        {
                            Id = new Guid("0e287e15-6c9f-44ab-9fb3-dc183f5e5e92"),
                            Description = "Network switch configuration updated.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("5dc94e7f-845b-480b-8c81-f1d50c359491")
                        },
                        new
                        {
                            Id = new Guid("78d4e5bd-d685-49b5-8b12-e71df921ec65"),
                            Description = "Server performance was monitored during load testing.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("70f625f4-33f5-4c62-9718-d3e2c420e703")
                        },
                        new
                        {
                            Id = new Guid("b9d04c5f-2ec0-4da1-92ab-7ef9bdcd82e4"),
                            Description = "Developer's laptop used for bug fixing.",
                            DeviceStatusId = 2,
                            ScheduleId = new Guid("77153502-8631-4b5f-b05d-76d4796c06d4")
                        },
                        new
                        {
                            Id = new Guid("5faf118e-4687-47c2-9b83-ecb389b8b6d5"),
                            Description = "Router settings optimized for network traffic.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("8bb44d07-f470-4434-a023-6bdffb4311cc")
                        },
                        new
                        {
                            Id = new Guid("76199946-58bd-473a-95a7-9da8afcb9fc7"),
                            Description = "Desktop setup for new project development.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("4fa30f09-e82a-4375-a28f-8190a8667a09")
                        },
                        new
                        {
                            Id = new Guid("e4880a12-6d1d-4e9b-8832-89c5982b1346"),
                            Description = "High-resolution monitor tested with graphic design software.",
                            DeviceStatusId = 2,
                            ScheduleId = new Guid("77790ba9-1f3c-4943-9e39-097000fc6fa2")
                        },
                        new
                        {
                            Id = new Guid("06a6fcd7-eb30-4728-9856-ee8d00f84810"),
                            Description = "Designer's tablet updated with latest design apps.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("5b1615a6-b870-456a-a483-e99a3f9122dc")
                        },
                        new
                        {
                            Id = new Guid("cf4dfffd-74e9-46dd-b9b5-2a9d09001564"),
                            Description = "Projector used for team meeting presentations.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("ff18bb51-3c4e-4fcb-a73e-39f60996be8c")
                        },
                        new
                        {
                            Id = new Guid("19f6bcc1-2a8d-4c5d-ab3b-d5d3b21da159"),
                            Description = "Network switch maintenance and inspection.",
                            DeviceStatusId = 2,
                            ScheduleId = new Guid("eb607a7a-2572-4a16-bbbd-99f3db25d40b")
                        },
                        new
                        {
                            Id = new Guid("697817b7-9d65-47dd-a39b-909f89e25bce"),
                            Description = "The desktop was used for backend development tasks.",
                            DeviceStatusId = 1,
                            ScheduleId = new Guid("5547314b-521a-47e9-ad60-5e376e686636")
                        },
                        new
                        {
                            Id = new Guid("b774e795-3469-4b58-afe0-5f6e9e0a6aec"),
                            Description = "The desktop was used for backend development tasks.",
                            DeviceStatusId = 2,
                            ScheduleId = new Guid("9bfeb5df-03a4-4ae5-904e-1779c19a5313")
                        },
                        new
                        {
                            Id = new Guid("5e2385b4-08f6-4e9e-888b-5d94c4b7fb78"),
                            Description = "The desktop was used for backend development tasks.",
                            DeviceStatusId = 2,
                            ScheduleId = new Guid("6500363e-6574-42e7-8577-6dc87a55ce15")
                        });
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeviceId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Purpose")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Purpose");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44efa2a7-4f64-4fc6-bbbe-869099817d4f"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            DeviceId = new Guid("9eae03ad-745d-47c0-baef-ae4657964e6a"),
                            EndDate = new DateTime(2024, 6, 28, 16, 45, 44, 277, DateTimeKind.Local).AddTicks(5839),
                            Purpose = "Testing",
                            ScheduledDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5836),
                            StartDate = new DateTime(2024, 6, 28, 15, 45, 44, 277, DateTimeKind.Local).AddTicks(5838)
                        },
                        new
                        {
                            Id = new Guid("70f625f4-33f5-4c62-9718-d3e2c420e703"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 25, 20, 45, 44, 277, DateTimeKind.Local).AddTicks(5893),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 25, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5891),
                            StartDate = new DateTime(2024, 6, 25, 19, 45, 44, 277, DateTimeKind.Local).AddTicks(5892)
                        },
                        new
                        {
                            Id = new Guid("77153502-8631-4b5f-b05d-76d4796c06d4"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 24, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5900),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 24, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5897),
                            StartDate = new DateTime(2024, 6, 24, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5898)
                        },
                        new
                        {
                            Id = new Guid("8bb44d07-f470-4434-a023-6bdffb4311cc"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 23, 20, 45, 44, 277, DateTimeKind.Local).AddTicks(5905),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 23, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5903),
                            StartDate = new DateTime(2024, 6, 23, 19, 45, 44, 277, DateTimeKind.Local).AddTicks(5904)
                        },
                        new
                        {
                            Id = new Guid("4fa30f09-e82a-4375-a28f-8190a8667a09"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 22, 20, 45, 44, 277, DateTimeKind.Local).AddTicks(5912),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 22, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5909),
                            StartDate = new DateTime(2024, 6, 22, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5910)
                        },
                        new
                        {
                            Id = new Guid("77790ba9-1f3c-4943-9e39-097000fc6fa2"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 21, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5918),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 21, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5915),
                            StartDate = new DateTime(2024, 6, 21, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5916)
                        },
                        new
                        {
                            Id = new Guid("5b1615a6-b870-456a-a483-e99a3f9122dc"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            DeviceId = new Guid("11d331b4-136c-4844-a686-ffc38c103268"),
                            EndDate = new DateTime(2024, 6, 26, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5923),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5921),
                            StartDate = new DateTime(2024, 6, 26, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5922)
                        },
                        new
                        {
                            Id = new Guid("ff18bb51-3c4e-4fcb-a73e-39f60996be8c"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            DeviceId = new Guid("b4dc2d48-482a-48a2-bad6-7a1e0e3139b7"),
                            EndDate = new DateTime(2024, 6, 27, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5929),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5927),
                            StartDate = new DateTime(2024, 6, 27, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5928)
                        },
                        new
                        {
                            Id = new Guid("eb607a7a-2572-4a16-bbbd-99f3db25d40b"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            DeviceId = new Guid("0a395b72-ae0d-4a49-b7f8-1763de733068"),
                            EndDate = new DateTime(2024, 6, 28, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5936),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5933),
                            StartDate = new DateTime(2024, 6, 28, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5934)
                        },
                        new
                        {
                            Id = new Guid("5547314b-521a-47e9-ad60-5e376e686636"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            DeviceId = new Guid("5947a22f-0191-419c-873b-4324b5b95e84"),
                            EndDate = new DateTime(2024, 6, 28, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5941),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5939),
                            StartDate = new DateTime(2024, 6, 28, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5940)
                        },
                        new
                        {
                            Id = new Guid("9bfeb5df-03a4-4ae5-904e-1779c19a5313"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            DeviceId = new Guid("a1d65f8a-f7fd-4995-940f-6ab254523f90"),
                            EndDate = new DateTime(2024, 6, 27, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5947),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5945),
                            StartDate = new DateTime(2024, 6, 27, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5946)
                        },
                        new
                        {
                            Id = new Guid("e377b750-0b20-4943-9e5d-6909d4810f13"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            DeviceId = new Guid("9eae03ad-745d-47c0-baef-ae4657964e6a"),
                            EndDate = new DateTime(2024, 6, 28, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5845),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 28, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5843),
                            StartDate = new DateTime(2024, 6, 28, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5844)
                        },
                        new
                        {
                            Id = new Guid("6500363e-6574-42e7-8577-6dc87a55ce15"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            DeviceId = new Guid("eb934470-4e73-41a8-8304-3bcb1ea18502"),
                            EndDate = new DateTime(2024, 6, 26, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5953),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5951),
                            StartDate = new DateTime(2024, 6, 26, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5952)
                        },
                        new
                        {
                            Id = new Guid("37d2c7b3-7406-418d-9062-e81dfff02d9a"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            DeviceId = new Guid("0104f1af-a314-4c64-8b8d-92c72caa97df"),
                            EndDate = new DateTime(2024, 6, 27, 16, 45, 44, 277, DateTimeKind.Local).AddTicks(5853),
                            Purpose = "Testing",
                            ScheduledDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5850),
                            StartDate = new DateTime(2024, 6, 27, 15, 45, 44, 277, DateTimeKind.Local).AddTicks(5851)
                        },
                        new
                        {
                            Id = new Guid("e0fa81b1-9eea-4b4b-93a7-b7a34aae4014"),
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            DeviceId = new Guid("0104f1af-a314-4c64-8b8d-92c72caa97df"),
                            EndDate = new DateTime(2024, 6, 27, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5859),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5856),
                            StartDate = new DateTime(2024, 6, 27, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5857)
                        },
                        new
                        {
                            Id = new Guid("db1fcaa0-e934-4429-a567-2ac802d0b453"),
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            DeviceId = new Guid("0104f1af-a314-4c64-8b8d-92c72caa97df"),
                            EndDate = new DateTime(2024, 6, 27, 20, 45, 44, 277, DateTimeKind.Local).AddTicks(5864),
                            Purpose = "Testing",
                            ScheduledDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5862),
                            StartDate = new DateTime(2024, 6, 27, 19, 45, 44, 277, DateTimeKind.Local).AddTicks(5863)
                        },
                        new
                        {
                            Id = new Guid("27f1b969-1b68-4cf8-8a51-c8be5356f7f8"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 26, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5870),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5868),
                            StartDate = new DateTime(2024, 6, 26, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5869)
                        },
                        new
                        {
                            Id = new Guid("4da0b3f8-95aa-40cd-ab32-75876ca13900"),
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 26, 20, 45, 44, 277, DateTimeKind.Local).AddTicks(5876),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 26, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5874),
                            StartDate = new DateTime(2024, 6, 26, 19, 45, 44, 277, DateTimeKind.Local).AddTicks(5875)
                        },
                        new
                        {
                            Id = new Guid("80d34442-7c14-4060-ae8f-24cda38e63f9"),
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 27, 16, 45, 44, 277, DateTimeKind.Local).AddTicks(5882),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 27, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5880),
                            StartDate = new DateTime(2024, 6, 27, 15, 45, 44, 277, DateTimeKind.Local).AddTicks(5881)
                        },
                        new
                        {
                            Id = new Guid("5dc94e7f-845b-480b-8c81-f1d50c359491"),
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            DeviceId = new Guid("2bda9dfe-1337-4372-bec0-c4c5e690ff6a"),
                            EndDate = new DateTime(2024, 6, 25, 18, 45, 44, 277, DateTimeKind.Local).AddTicks(5888),
                            Purpose = "Development",
                            ScheduledDate = new DateTime(2024, 6, 25, 14, 45, 44, 277, DateTimeKind.Local).AddTicks(5885),
                            StartDate = new DateTime(2024, 6, 25, 17, 45, 44, 277, DateTimeKind.Local).AddTicks(5886)
                        });
                });

            modelBuilder.Entity("Entities.Models.StudentDetail", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.Property<string>("Major")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Major");

                    b.Property<string>("RollNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RollNumber");

                    b.Property<string>("Specialized")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Specialized");

                    b.HasKey("AccountId");

                    b.ToTable("StudentDetails");

                    b.HasData(
                        new
                        {
                            AccountId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            Major = "Software Engineering",
                            RollNumber = "HE163098",
                            Specialized = "ASP.NET"
                        },
                        new
                        {
                            AccountId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            Major = "Data Engineer",
                            RollNumber = "HE163884",
                            Specialized = "Data Analyst"
                        },
                        new
                        {
                            AccountId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            Major = "Artifact Intelligent",
                            RollNumber = "HE163956",
                            Specialized = "C"
                        },
                        new
                        {
                            AccountId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            Major = "Iot",
                            RollNumber = "HE145689",
                            Specialized = "Python"
                        },
                        new
                        {
                            AccountId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            Major = "Software Engineering",
                            RollNumber = "HE156894",
                            Specialized = "PHP"
                        });
                });

            modelBuilder.Entity("Entities.Models.TaskClosure", b =>
                {
                    b.Property<Guid>("AncestorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ancestor");

                    b.Property<Guid>("DescendantID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Descendant");

                    b.Property<int>("Depth")
                        .HasColumnType("int")
                        .HasColumnName("Depth");

                    b.HasKey("AncestorID", "DescendantID");

                    b.HasIndex("DescendantID");

                    b.ToTable("TaskClosure");
                });

            modelBuilder.Entity("Entities.Models.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EditDate");

                    b.Property<bool>("RequiredValidation")
                        .HasColumnType("bit")
                        .HasColumnName("RequiresValidation");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<Guid>("TaskGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskGuid");

                    b.Property<int>("TaskPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("TaskPriorityId");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TaskStatusId");

                    b.Property<Guid?>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("TaskGuid");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TasksId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("Entities.Models.TaskList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("MaxTasks")
                        .HasColumnType("int")
                        .HasColumnName("MaxTasks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskLists");
                });

            modelBuilder.Entity("Entities.Models.TaskPriorities", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskPriorities");
                });

            modelBuilder.Entity("Entities.Models.Tasks", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AssignedTo");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DueDate");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("RequiredValidation")
                        .HasColumnType("bit")
                        .HasColumnName("RequiresValidation");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<Guid>("TaskListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskListId");

                    b.Property<int>("TaskPriorityId")
                        .HasColumnType("int")
                        .HasColumnName("TaskPriorityId");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TaskStatusId");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("TaskListId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Entities.Models.TasksStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TaskStatus", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SystemRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c55924f5-4cf4-4a29-9820-b5d0d9bdf3c5",
                            Name = "LabAdmin",
                            NormalizedName = "LABADMIN"
                        },
                        new
                        {
                            Id = "cd10e24b-ecbc-4dd0-8141-32c452e1d1c2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "97571dcc-079e-4c3a-ba9b-bbde3d03a03d",
                            RoleId = "c55924f5-4cf4-4a29-9820-b5d0d9bdf3c5"
                        },
                        new
                        {
                            UserId = "6c6abe62-f811-4a8b-96eb-ed326c47d209",
                            RoleId = "cd10e24b-ecbc-4dd0-8141-32c452e1d1c2"
                        },
                        new
                        {
                            UserId = "a687bb04-4f19-49d5-a60f-2db52044767c",
                            RoleId = "cd10e24b-ecbc-4dd0-8141-32c452e1d1c2"
                        },
                        new
                        {
                            UserId = "603600b5-ca65-4fa7-817e-4583ef22b330",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "68fdf17c-7cbe-4a4c-a674-c530ffc77667",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "7397c854-194b-4749-9205-f46e4f2fccf8",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "6ad0a020-e6a6-4e66-8f4a-d815594ba862",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        },
                        new
                        {
                            UserId = "1c5c3b44-7164-4232-a49a-10ab367d5102",
                            RoleId = "fef2c515-3fe0-4b7d-9f9f-a2ecca647e8d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AccountToken", (string)null);
                });

            modelBuilder.Entity("TaskHistoriesLabels", b =>
                {
                    b.Property<Guid>("TaskHistoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskHistoryId");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LabelId");

                    b.HasKey("TaskHistoryId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TaskHistoriesLabels", (string)null);
                });

            modelBuilder.Entity("TasksAccount", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountId");

                    b.HasKey("TaskId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("TasksAccounts", (string)null);
                });

            modelBuilder.Entity("TasksFile", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FileId");

                    b.HasKey("TaskId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TasksFiles", (string)null);
                });

            modelBuilder.Entity("TasksLabel", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskId");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LabelId");

                    b.HasKey("TaskId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TasksLabels", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.HasOne("Entities.Models.Account", "VerifiedByUser")
                        .WithMany("VerifiedAccounts")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK_Accounts_Accounts");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByUser")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Comments_Accounts");

                    b.HasOne("Entities.Models.Comment", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Comments_Comments");

                    b.HasOne("Entities.Models.Tasks", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Tasks");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Parent");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.HasOne("Entities.Models.DeviceStatus", "DeviceStatus")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Devices_DeviceStatuses");

                    b.HasOne("Entities.Models.Account", "OwnedByUser")
                        .WithMany("Devices")
                        .HasForeignKey("OwnedBy")
                        .HasConstraintName("FK_Devices_Accounts");

                    b.Navigation("DeviceStatus");

                    b.Navigation("OwnedByUser");
                });

            modelBuilder.Entity("Entities.Models.Files", b =>
                {
                    b.HasOne("Entities.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .IsRequired()
                        .HasConstraintName("FK_Files_Folders");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Entities.Models.Folder", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByUser")
                        .WithMany("Folders")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Folders_Accounts");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Entities.Models.FolderClosure", b =>
                {
                    b.HasOne("Entities.Models.Folder", "AncestorNavigation")
                        .WithMany("FolderClosureAncestor")
                        .HasForeignKey("AncestorID")
                        .IsRequired()
                        .HasConstraintName("FK_FolderClosures_Folders");

                    b.HasOne("Entities.Models.Folder", "DescendantNavigation")
                        .WithMany("FolderClosureDescendant")
                        .HasForeignKey("DescendantID")
                        .IsRequired()
                        .HasConstraintName("FK_FolderClosures_Folders1");

                    b.Navigation("AncestorNavigation");

                    b.Navigation("DescendantNavigation");
                });

            modelBuilder.Entity("Entities.Models.Member", b =>
                {
                    b.HasOne("Entities.Models.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_Projects");

                    b.HasOne("Entities.Models.Account", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_Accounts");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByNavigation")
                        .WithMany("News")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_News_Accounts");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Entities.Models.NewsFile", b =>
                {
                    b.HasOne("Entities.Models.News", "News")
                        .WithMany("NewsFiles")
                        .HasForeignKey("NewsID")
                        .IsRequired()
                        .HasConstraintName("FK_NewsFiles_News1");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.Account", "CreatedByUser")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Notifications_Accounts");

                    b.HasOne("Entities.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_NotificationTypes");

                    b.Navigation("CreatedByUser");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("Entities.Models.NotificationAccount", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithMany("NotificationsAccounts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationsAccounts_Accounts");

                    b.HasOne("Entities.Models.Notification", "Notification")
                        .WithMany("NotificationsAccounts")
                        .HasForeignKey("NotificationId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationsAccounts_Notifications");

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.HasOne("Entities.Models.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_ProjectStatuses");

                    b.HasOne("Entities.Models.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_ProjectTypes");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.HasOne("Entities.Models.Schedule", "Schedules")
                        .WithOne("Report")
                        .HasForeignKey("Entities.Models.Report", "ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_Schedules");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithMany("Schedules")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Accounts");

                    b.HasOne("Entities.Models.Device", "Device")
                        .WithMany("Schedules")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Devices");

                    b.Navigation("Account");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Entities.Models.StudentDetail", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithOne("StudentDetail")
                        .HasForeignKey("Entities.Models.StudentDetail", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentDetails_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Models.TaskClosure", b =>
                {
                    b.HasOne("Entities.Models.Tasks", "AncestorTaskNavigation")
                        .WithMany("TaskClosuresAncestor")
                        .HasForeignKey("AncestorID")
                        .IsRequired()
                        .HasConstraintName("FK_TaskClosures_Task");

                    b.HasOne("Entities.Models.Tasks", "DescendantTaskNavigation")
                        .WithMany("TaskClosuresDescendant")
                        .HasForeignKey("DescendantID")
                        .IsRequired()
                        .HasConstraintName("FK_TaskClosures_Task1");

                    b.Navigation("AncestorTaskNavigation");

                    b.Navigation("DescendantTaskNavigation");
                });

            modelBuilder.Entity("Entities.Models.TaskHistory", b =>
                {
                    b.HasOne("Entities.Models.Account", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tasks", "TaskVersion")
                        .WithMany()
                        .HasForeignKey("TaskGuid")
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistories_Tasks");

                    b.HasOne("Entities.Models.TaskPriorities", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistories_TaskPrioties");

                    b.HasOne("Entities.Models.TasksStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistories_TaskStatus");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany("TaskHistories")
                        .HasForeignKey("TasksId");

                    b.Navigation("AssignedToUser");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskVersion");
                });

            modelBuilder.Entity("Entities.Models.TaskList", b =>
                {
                    b.HasOne("Entities.Models.Project", "Project")
                        .WithMany("TaskLists")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskLists_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Entities.Models.Tasks", b =>
                {
                    b.HasOne("Entities.Models.Account", "AssignedToUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_Tasks_Accounts");

                    b.HasOne("Entities.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskLists");

                    b.HasOne("Entities.Models.TaskPriorities", "TaskPriority")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskPriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskPrioties");

                    b.HasOne("Entities.Models.TasksStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskStatus");

                    b.Navigation("AssignedToUser");

                    b.Navigation("TaskList");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskHistoriesLabels", b =>
                {
                    b.HasOne("Entities.Models.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistoriesLabels_Labels");

                    b.HasOne("Entities.Models.TaskHistory", null)
                        .WithMany()
                        .HasForeignKey("TaskHistoryId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskHistoriesLabels_TaskHistories");
                });

            modelBuilder.Entity("TasksAccount", b =>
                {
                    b.HasOne("Entities.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksAccounts_Accounts");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksAccounts_Tasks");
                });

            modelBuilder.Entity("TasksFile", b =>
                {
                    b.HasOne("Entities.Models.Files", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksFiles_Files");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksFiles_Tasks");
                });

            modelBuilder.Entity("TasksLabel", b =>
                {
                    b.HasOne("Entities.Models.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksLabels_Labels");

                    b.HasOne("Entities.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TasksLabels_Tasks");
                });

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Devices");

                    b.Navigation("Folders");

                    b.Navigation("Members");

                    b.Navigation("News");

                    b.Navigation("Notifications");

                    b.Navigation("NotificationsAccounts");

                    b.Navigation("Schedules");

                    b.Navigation("StudentDetail");

                    b.Navigation("Tasks");

                    b.Navigation("VerifiedAccounts");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Entities.Models.DeviceStatus", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Entities.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("FolderClosureAncestor");

                    b.Navigation("FolderClosureDescendant");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.Navigation("NewsFiles");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Navigation("NotificationsAccounts");
                });

            modelBuilder.Entity("Entities.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Entities.Models.Project", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("TaskLists");
                });

            modelBuilder.Entity("Entities.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Entities.Models.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("Entities.Models.TaskList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Entities.Models.TaskPriorities", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Entities.Models.Tasks", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TaskClosuresAncestor");

                    b.Navigation("TaskClosuresDescendant");

                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("Entities.Models.TasksStatus", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
